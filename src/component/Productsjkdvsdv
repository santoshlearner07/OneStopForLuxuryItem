import React, { useEffect, useState } from 'react';
import { Button, Col, Container, Form, Row, Tooltip, OverlayTrigger } from 'react-bootstrap';
import axios from 'axios';
import {jwtDecode} from 'jwt-decode';
import BaseApi from '../utils/BaseAPI';
import FilteredProperties from './FilteredProperties';
import FetchPreviousSearches from './FetchPreviousSearches';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

function Product(props) {
  const [filters, setFilters] = useState({
    address: '',
    bedrooms: '',
    bathrooms: '',
    minPrice: '',
    maxPrice: '',
  });
  const [priorities, setPriorities] = useState({
    bedroomsPriority: '',
    bathroomsPriority: '',
    pricePriority: '',
  });
  const [filteredProperties, setFilteredProperties] = useState([]);
  const [pastSearch, setPastSearch] = useState([]);
  const [isFocus, setIsFocus] = useState(false);
  const [showTooltip, setShowTooltip] = useState(false);

  const userLogin = () => toast.warning("Please login to save your searches");
  const allSearchSaved = () => toast.success("Search Saved");

  useEffect(() => {
    if (props.properties.length) {
      applyFilters(filters, priorities);
    }
  }, [filters, priorities, props.properties]);

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      const decoded = jwtDecode(token);
      const decodedEmail = decoded.email;

      axios.get(`${BaseApi}/getUserSearch?email=${decodedEmail}`)
        .then(res => setPastSearch(res.data.searchData || []))
        .catch(err => console.error('Error fetching user search data:', err));
    }
  }, []);

  const applyFilters = (currentFilters, currentPriorities) => {
    let filtered = props.properties || [];

    if (!Array.isArray(filtered)) {
      console.error('Expected an array for properties, got:', filtered);
      return;
    }

    const { bedrooms, bathrooms, minPrice, maxPrice } = currentFilters;
    const { bedroomsPriority, bathroomsPriority, pricePriority } = currentPriorities;

    // Create a list of filter criteria sorted by priority (descending)
    const sortedFilters = [
      { filter: 'bedrooms', priority: Number(bedroomsPriority), value: bedrooms },
      { filter: 'bathrooms', priority: Number(bathroomsPriority), value: bathrooms },
      { filter: 'price', priority: Number(pricePriority), min: minPrice, max: maxPrice }
    ].filter(item => item.priority > 0) // Remove filters with zero priority
      .sort((a, b) => b.priority - a.priority); // Sort by priority (higher first)

    let results = filtered;

    for (const { filter, value, min, max } of sortedFilters) {
      if (filter === 'bedrooms' && value) {
        const bedroomsValue = Number(value);
        if (results.length > 0) {
          // Filter properties based on exact match or less than criteria
          results = results.filter(property => {
            const propertyBedrooms = property.bedrooms || 0;
            return propertyBedrooms === bedroomsValue;
          });
        }
        if (results.length === 0) break; // If no exact match, stop further filtering
      }

      if (filter === 'bathrooms' && value) {
        const bathroomsValue = Number(value);
        results = results.filter(property => property.bathrooms <= bathroomsValue);
        if (results.length === 0) break; // If no match, stop further filtering
      }

      if (filter === 'price') {
        results = results.filter(property => {
          const propertyPrice = property.price?.amount || 0;
          let priceMatch = true;

          if (min && max) {
            priceMatch = propertyPrice >= Number(min) && propertyPrice <= Number(max);
          } else if (min) {
            priceMatch = propertyPrice >= Number(min);
          } else if (max) {
            priceMatch = propertyPrice <= Number(max);
          }
          return priceMatch;
        });
        if (results.length === 0) break; // If no match, stop further filtering
      }
    }

    // Sorting the results based on the priorities
    results.sort((a, b) => {
      let scoreA = 0;
      let scoreB = 0;

      if (bedroomsPriority > 0 && a.bedrooms === Number(filters.bedrooms)) {
        scoreA += Number(bedroomsPriority);
      }
      if (bedroomsPriority > 0 && b.bedrooms === Number(filters.bedrooms)) {
        scoreB += Number(bedroomsPriority);
      }

      if (bathroomsPriority > 0 && a.bathrooms <= Number(filters.bathrooms)) {
        scoreA += Number(bathroomsPriority);
      }
      if (bathroomsPriority > 0 && b.bathrooms <= Number(filters.bathrooms)) {
        scoreB += Number(bathroomsPriority);
      }

      if (pricePriority > 0) {
        const priceA = a.price?.amount || 0;
        const priceB = b.price?.amount || 0;
        if (priceA >= Number(filters.minPrice) && priceA <= Number(filters.maxPrice)) {
          scoreA += Number(pricePriority);
        }
        if (priceB >= Number(filters.minPrice) && priceB <= Number(filters.maxPrice)) {
          scoreB += Number(pricePriority);
        }
      }

      return scoreB - scoreA; // Higher score (priority match) comes first
    });

    setFilteredProperties(results);
    console.log("Final filtered and sorted properties:", results);
  };

  const handleInputChange = (e, filterType) => {
    const value = e.target.value;
    setFilters(prevFilters => ({
      ...prevFilters,
      [filterType]: value
    }));
  };

  const handlePriorityChange = (e, priorityType) => {
    const value = e.target.value;
    setPriorities(prevPriorities => ({
      ...prevPriorities,
      [priorityType]: value
    }));
  };

  const handleSearch = (e) => {
    e.preventDefault();
    const token = localStorage.getItem('token');

    if (token) {
      const decoded = jwtDecode(token);
      const decodedEmail = decoded.email;
      localStorage.setItem('email', decodedEmail);

      if (!filters.address.trim()) {
        alert('Cannot search empty address');
        return;
      }

      const savingSearch = {
        email: decodedEmail,
        searchData: filters.address
      };

      axios.post(`${BaseApi}/saveSearch`, savingSearch)
        .then((res) => {
          console.log('Search saved:', res);
          allSearchSaved();
        })
        .catch(err => {
          console.error('Error saving search:', err);
        });
    } else {
      userLogin();
    }
  };

  const handleSaveAll = () => {
    const token = localStorage.getItem('token');

    if (token) {
      const decoded = jwtDecode(token);
      const decodedEmail = decoded.email;

      const savingData = {
        email: decodedEmail,
        filters: [{
          address: filters.address,
          bedrooms: filters.bedrooms,
          bathrooms: filters.bathrooms,
          minPrice: filters.minPrice,
          maxPrice: filters.maxPrice
        }]
      };

      axios.post(`${BaseApi}/saveAllUserInputs`, savingData)
        .then((res) => {
          console.log('All user inputs saved:', res);
          allSearchSaved();
        })
        .catch(err => {
          if (err.response.status === 404) {
            alert('User not found. Please create an account to save your data.');
          } else {
            console.error('Error saving all user inputs:', err);
          }
        });
    } else {
      userLogin();
    }
  };

  const handleFocus = () => {
    setIsFocus(true);
    setShowTooltip(true);

    setTimeout(() => setShowTooltip(false), 5000);
  };

  const handleSelectSearch = (item) => {
    setFilters({
      address: item.address || '',
      bedrooms: item.bedrooms.join(', ') || '',
      bathrooms: item.bathrooms.join(', ') || '',
      minPrice: item.minPrice || '',
      maxPrice: item.maxPrice || ''
    });
  };

  const handleIncreaseMaxPrice = () => {
    setFilters(prevFilters => ({
      ...prevFilters,
      maxPrice: prevFilters.maxPrice ? (Number(prevFilters.maxPrice) * 1.1).toFixed(2) : ''
    }));
  };

  const renderTooltip = (props) => (
    <Tooltip id="button-tooltip" {...props}>
      {pastSearch.length > 0 ? (
        <ul>
          {pastSearch.map((item, index) => <li key={index}>{item}</li>)}
        </ul>
      ) : (
        <span>No previous searches</span>
      )}
    </Tooltip>
  );

  return (
    <Container fluid>
      <Row>
        <Col sm={4}>
          <Form onSubmit={handleSearch}>
            <Form.Group>
              <Form.Label>Address</Form.Label>
              <OverlayTrigger
                placement="right"
                show={isFocus && showTooltip}
                overlay={renderTooltip}
              >
                <Form.Control
                  type="text"
                  placeholder="Enter address"
                  value={filters.address}
                  onChange={(e) => handleInputChange(e, 'address')}
                  onFocus={handleFocus} // Set focus state when input is focused
                />
              </OverlayTrigger>
            </Form.Group>
            <Form.Group>
              <Form.Label>Bedrooms</Form.Label>
              <Form.Control
                type="number"
                placeholder="Max number of bedrooms"
                value={filters.bedrooms}
                onChange={(e) => handleInputChange(e, 'bedrooms')}
              />
              <Form.Label>Priority</Form.Label>
              <Form.Control
                type="number"
                placeholder="Priority"
                value={priorities.bedroomsPriority}
                onChange={(e) => handlePriorityChange(e, 'bedroomsPriority')}
              />
            </Form.Group>
            <Form.Group>
              <Form.Label>Bathrooms</Form.Label>
              <Form.Control
                type="number"
                placeholder="Max number of bathrooms"
                value={filters.bathrooms}
                onChange={(e) => handleInputChange(e, 'bathrooms')}
              />
              <Form.Label>Priority</Form.Label>
              <Form.Control
                type="number"
                placeholder="Priority"
                value={priorities.bathroomsPriority}
                onChange={(e) => handlePriorityChange(e, 'bathroomsPriority')}
              />
            </Form.Group>
            <Form.Group>
              <Form.Label>Price</Form.Label>
              <Row>
                <Col>
                  <Form.Control
                    type="number"
                    placeholder="Min Price"
                    value={filters.minPrice}
                    onChange={(e) => handleInputChange(e, 'minPrice')}
                  />
                </Col>
                <Col>
                  <Form.Control
                    type="number"
                    placeholder="Max Price"
                    value={filters.maxPrice}
                    onChange={(e) => handleInputChange(e, 'maxPrice')}
                  />
                </Col>
              </Row>
              <Button variant="outline-secondary" onClick={handleIncreaseMaxPrice}>
                Increase Max Price by 10%
              </Button>
              <Form.Label>Priority</Form.Label>
              <Form.Control
                type="number"
                placeholder="Priority"
                value={priorities.pricePriority}
                onChange={(e) => handlePriorityChange(e, 'pricePriority')}
              />
            </Form.Group>
            <Button type="submit" variant="primary">Save Search</Button>
            <Button variant="outline-primary" onClick={handleSaveAll}>Save All Filters</Button>
          </Form>
          <FetchPreviousSearches
            pastSearch={pastSearch}
            onSelectSearch={handleSelectSearch}
          />
        </Col>
        <Col sm={8}>
          <FilteredProperties
            filteredProperties={filteredProperties}
            setFilteredProperties={setFilteredProperties}
          />
        </Col>
      </Row>
      <ToastContainer />
    </Container>
  );
}

// export default Product;
import axios from 'axios';
import React, { useState } from 'react'
import BaseApi from '../utils/BaseAPI';
import { ToastContainer, toast } from 'react-toastify';
import { Button, Col, Container, Form, Row } from 'react-bootstrap';

function AddProperty() {
  // Updated state to match the schema
  const [property, setProperty] = useState({
    id: "", // string
    bedrooms: 0, // number
    bathrooms: 0, // number
    summary: "", // string
    displayAddress: "", // string
    latitude: 0.0, // number
    longitude: 0.0, // number
    amount: 0.0, // number
    currencyCode: "£", // string
    premiumListing: false // boolean
  });

  const [selectedImages, setSelectedImages] = useState([]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setProperty(prevState => ({
      ...prevState,
      [name]: value
    }));
  };

  // const handleFileChange = (e) => {
  //   setSelectedImages(e.target.files);
  // };

  const handleCheckboxChange = (e) => {
    const { name, checked } = e.target;
    setProperty(prevState => ({
      ...prevState,
      [name]: checked
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const propertyData = {
      id: property.id,
      bedrooms: Number(property.bedrooms),
      bathrooms: Number(property.bathrooms),
      summary: property.summary,
      displayAddress: property.displayAddress,
      latitude: Number(property.latitude),
      longitude: Number(property.longitude),
      amount: Number(property.amount),
      currencyCode: property.currencyCode,
      premiumListing: property.premiumListing
    }

    console.log(propertyData);
    try {
      await axios.post(`${BaseApi}/properties/useraddproperty`, propertyData)
      .then((res)=>{
        console.log(res)
      })
    } catch (error) {
      console.log(error)
    }
    // try {
    //   await axios.post(`${BaseApi}/properties/useraddproperty`, propertyData, {
    //     headers: {
    //       'Content-Type': 'multipart/form-data'
    //     }
    //   });
    //   toast.success('Property added successfully!');
    // } catch (error) {
    //   toast.error('Error adding property: ' + (error.response ? error.response.data.message : error.message));
    // }
  };
  
  return (
    <Container style={{ backgroundColor: "white" }} >
      <h2>Add New Property</h2>
      <Form onSubmit={handleSubmit}>
        <Row>
          <Col sm={6}>
            <Form.Group>
              <Form.Label>ID</Form.Label>
              <Form.Control
                type="text"
                name="id"
                value={property.id}
                onChange={handleChange}
                required
              />
            </Form.Group>
            <Form.Group>
              <Form.Label>Bedrooms</Form.Label>
              <Form.Control
                type="number"
                name="bedrooms"
                value={property.bedrooms}
                onChange={handleChange}
                required
              />
            </Form.Group>
            <Form.Group>
              <Form.Label>Bathrooms</Form.Label>
              <Form.Control
                type="number"
                name="bathrooms"
                value={property.bathrooms}
                onChange={handleChange}
                required
              />
            </Form.Group>
            <Form.Group>
              <Form.Label>Summary</Form.Label>
              <Form.Control
                as="textarea"
                name="summary"
                value={property.summary}
                onChange={handleChange}
              />
            </Form.Group>
            <Form.Group>
              <Form.Label>Display Address</Form.Label>
              <Form.Control
                type="text"
                name="displayAddress"
                value={property.displayAddress}
                onChange={handleChange}
              />
            </Form.Group>
          </Col>
          <Col sm={6}>
            <Form.Group>
              <Form.Label>Latitude</Form.Label>
              <Form.Control
                type="number"
                step="any"
                name="latitude"
                value={property.latitude}
                onChange={handleChange}
                required
              />
            </Form.Group>
            <Form.Group>
              <Form.Label>Longitude</Form.Label>
              <Form.Control
                type="number"
                step="any"
                name="longitude"
                value={property.longitude}
                onChange={handleChange}
                required
              />
            </Form.Group>
            <Form.Group>
              <Form.Label>Price Amount</Form.Label>
              <Form.Control
                type="number"
                name="amount"
                value={property.amount}
                onChange={handleChange}
                required
              />
            </Form.Group>
            <Form.Group>
              <Form.Label>Currency Code</Form.Label>
              <Form.Control
                type="text"
                name="currencyCode"
                value={property.currencyCode}
                onChange={handleChange}
              />
            </Form.Group>
            <Form.Group>
              <Form.Check
                type="checkbox"
                label="Premium Listing"
                name="premiumListing"
                checked={property.premiumListing}
                onChange={handleCheckboxChange}
              />
            </Form.Group>
          </Col>
          {/* <Col sm={6}>
            <Form.Group>
              <Form.Label>Property Images</Form.Label>
              <Form.Control
                type="file"
                name="propertyImages"
                multiple
                onChange={handleFileChange}
              />
            </Form.Group>
          </Col> */}
        </Row>
        <Button type="submit">Add Property</Button>
      </Form>
      <ToastContainer />
    </Container>
  )
}

export default AddPropertysaa;
